(1) 
ISSUE : 
    If getting the below issue while connecting to postgres at "localhost:5432", through postgres-client :
    - [role "postgres" does not exist]

RESOLUTION:
    The issue may be because of Postgres instance running locally (probably from another project), so try running 
    "brew services stop postgresql" (assuming its installed with Homebrew). This will most probably resolve the issue.

(2)   
ISSUE :
    Postgres is not getting started in docker:
RESOLUTION:
    Keep the 'db-data/postgres' folder completely empty. Remove the '.gitkeep' files from both 'postgres' & 'mongo' folders.
    '.gitkeep' is kept to just keep track of the folder, as git does not track empty folders.    

(3)   
ISSUE :
    If getting this issue -> "protoc-gen-go: Plugin failed with status code 1", which is related to 'protoc-gen-go'
    not getting install at correct location.
RESOLUTION:
    Follow below steps on Mac, to fix it :
        Step-1 > go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        Step-2 > echo 'export PATH=$PATH:$(go env GOPATH)/bin' >> ~/.zshrc
        Step-3 > source ~/.zshrc
    Above should fix the issue, verify by running below command:
        Step-4 > which protoc-gen-go

(4)   
ISSUE :
    Docker images are not working on EC2 Instance(as it is x86_64), and our local created build is in (arm64):
    Command run on Local:>  uname -a
        Darwin ; root:xnu-10063.121.3~5/RELEASE_ARM64_T8103 arm64
    Command run on EC2 Instance:>  uname -a
        Linux #13-Ubuntu SMP Mon Jul 15 13:40:27 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
RESOLUTION:
    As there is mismatch in the platform on which the build was generated, using which the docker image is also genrated.
    So we need to run below command in MakeFile to generate build specific to 'linux/x86_64', by adding an additional env variable 
    that is (GOARCH=amd64), as by default it is taking the defualt machine GOARCH, which is (GOARCH=arm64) for Apple Mac Silicon Chip:
        {{ cd ./broker-service && env GOOS=linux CGO_ENABLED=0 GOARCH=amd64 go build -o ${BROKER_BINARY} ./cmd/api }}

(5)   
ISSUE :
    Services on manager-node is not able to communicate with service on worker-nodes, thus causing timeout.
RESOLUTION:
    This occurs because of worker-node being connected to swarm using 'private_ip', thus not able to communicate with services deployed 
    on worker-node, so we need to add the worker-node using their 'public_ip'.
    Follow below steps to resolve the issue:-
        Step:1=> Leave the Swarm on the Worker Node: [Run command on worker-node]
                    sudo docker swarm leave --force
        Step:2=> Remove the Node from the Manager (if necessary): [Run command on manager-node]
                    sudo docker node rm <node_id>
        Step:3=> Get the Join Token on the Manager: [Run command on manager-node]
                    sudo docker swarm join-token worker
        Step:4=> Join the Worker Node with the Correct Advertised Address:  [Run command on worker-node]
                    sudo docker swarm join --token <join_token> --advertise-addr <public_ip_of_worker_node> <public_ip_of_manager_node>:2377

    --- To verify if worker-node is connected using 'public-ip-add' ---
        Ensure that the Docker Swarm overlay network is properly configured. [Run command on manager-node]
            docker network ls
        Inspect the overlay network (mainly check in the 'Peers' field if the mentioned ip-add are all public one):    
            docker network inspect <network_name>            